// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package CKPTValStaking

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// CKPTValStakingMetaData contains all meta data concerning the CKPTValStaking contract.
var CKPTValStakingMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"UnstakeInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dispatcherURL\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"blsPublicKey\",\"type\":\"string\"}],\"name\":\"ValidatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"dispatcherURL\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"blsPublicKey\",\"type\":\"string\"}],\"name\":\"ValidatorUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getTopValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"stakes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"dispatcherURLs\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"blsPublicKeys\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_validator\",\"type\":\"address\"}],\"name\":\"getValidator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"dispatcherURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"blsPublicKey\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"initiateUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dispatcherURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_blsPublicKey\",\"type\":\"string\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockPeriod\",\"type\":\"uint256\"}],\"name\":\"setLockPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumStake\",\"type\":\"uint256\"}],\"name\":\"setMinimumStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardRate\",\"type\":\"uint256\"}],\"name\":\"setRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"updateValidatorCursor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_dispatcherURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_blsPublicKey\",\"type\":\"string\"}],\"name\":\"updateValidatorInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validatorAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeTime\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"dispatcherURL\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"blsPublicKey\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isActive\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// CKPTValStakingABI is the input ABI used to generate the binding from.
// Deprecated: Use CKPTValStakingMetaData.ABI instead.
var CKPTValStakingABI = CKPTValStakingMetaData.ABI

// CKPTValStakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use CKPTValStakingMetaData.Bin instead.
var CKPTValStakingBin = CKPTValStakingMetaData.Bin

// DeployCKPTValStaking deploys a new Ethereum contract, binding an instance of CKPTValStaking to it.
func DeployCKPTValStaking(auth *bind.TransactOpts, backend bind.ContractBackend, _stakingToken common.Address, _rewardRate *big.Int, _minimumStake *big.Int) (common.Address, *types.Transaction, *CKPTValStaking, error) {
	parsed, err := CKPTValStakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(CKPTValStakingBin), backend, _stakingToken, _rewardRate, _minimumStake)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &CKPTValStaking{CKPTValStakingCaller: CKPTValStakingCaller{contract: contract}, CKPTValStakingTransactor: CKPTValStakingTransactor{contract: contract}, CKPTValStakingFilterer: CKPTValStakingFilterer{contract: contract}}, nil
}

// CKPTValStaking is an auto generated Go binding around an Ethereum contract.
type CKPTValStaking struct {
	CKPTValStakingCaller     // Read-only binding to the contract
	CKPTValStakingTransactor // Write-only binding to the contract
	CKPTValStakingFilterer   // Log filterer for contract events
}

// CKPTValStakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type CKPTValStakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CKPTValStakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type CKPTValStakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CKPTValStakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type CKPTValStakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// CKPTValStakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type CKPTValStakingSession struct {
	Contract     *CKPTValStaking   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// CKPTValStakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type CKPTValStakingCallerSession struct {
	Contract *CKPTValStakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// CKPTValStakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type CKPTValStakingTransactorSession struct {
	Contract     *CKPTValStakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// CKPTValStakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type CKPTValStakingRaw struct {
	Contract *CKPTValStaking // Generic contract binding to access the raw methods on
}

// CKPTValStakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type CKPTValStakingCallerRaw struct {
	Contract *CKPTValStakingCaller // Generic read-only contract binding to access the raw methods on
}

// CKPTValStakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type CKPTValStakingTransactorRaw struct {
	Contract *CKPTValStakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewCKPTValStaking creates a new instance of CKPTValStaking, bound to a specific deployed contract.
func NewCKPTValStaking(address common.Address, backend bind.ContractBackend) (*CKPTValStaking, error) {
	contract, err := bindCKPTValStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &CKPTValStaking{CKPTValStakingCaller: CKPTValStakingCaller{contract: contract}, CKPTValStakingTransactor: CKPTValStakingTransactor{contract: contract}, CKPTValStakingFilterer: CKPTValStakingFilterer{contract: contract}}, nil
}

// NewCKPTValStakingCaller creates a new read-only instance of CKPTValStaking, bound to a specific deployed contract.
func NewCKPTValStakingCaller(address common.Address, caller bind.ContractCaller) (*CKPTValStakingCaller, error) {
	contract, err := bindCKPTValStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &CKPTValStakingCaller{contract: contract}, nil
}

// NewCKPTValStakingTransactor creates a new write-only instance of CKPTValStaking, bound to a specific deployed contract.
func NewCKPTValStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*CKPTValStakingTransactor, error) {
	contract, err := bindCKPTValStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &CKPTValStakingTransactor{contract: contract}, nil
}

// NewCKPTValStakingFilterer creates a new log filterer instance of CKPTValStaking, bound to a specific deployed contract.
func NewCKPTValStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*CKPTValStakingFilterer, error) {
	contract, err := bindCKPTValStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &CKPTValStakingFilterer{contract: contract}, nil
}

// bindCKPTValStaking binds a generic wrapper to an already deployed contract.
func bindCKPTValStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := CKPTValStakingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CKPTValStaking *CKPTValStakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CKPTValStaking.Contract.CKPTValStakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CKPTValStaking *CKPTValStakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.CKPTValStakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CKPTValStaking *CKPTValStakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.CKPTValStakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_CKPTValStaking *CKPTValStakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _CKPTValStaking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_CKPTValStaking *CKPTValStakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_CKPTValStaking *CKPTValStakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.contract.Transact(opts, method, params...)
}

// GetStake is a free data retrieval call binding the contract method 0x7a766460.
//
// Solidity: function getStake(address _validator) view returns(uint256)
func (_CKPTValStaking *CKPTValStakingCaller) GetStake(opts *bind.CallOpts, _validator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _CKPTValStaking.contract.Call(opts, &out, "getStake", _validator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStake is a free data retrieval call binding the contract method 0x7a766460.
//
// Solidity: function getStake(address _validator) view returns(uint256)
func (_CKPTValStaking *CKPTValStakingSession) GetStake(_validator common.Address) (*big.Int, error) {
	return _CKPTValStaking.Contract.GetStake(&_CKPTValStaking.CallOpts, _validator)
}

// GetStake is a free data retrieval call binding the contract method 0x7a766460.
//
// Solidity: function getStake(address _validator) view returns(uint256)
func (_CKPTValStaking *CKPTValStakingCallerSession) GetStake(_validator common.Address) (*big.Int, error) {
	return _CKPTValStaking.Contract.GetStake(&_CKPTValStaking.CallOpts, _validator)
}

// GetTopValidators is a free data retrieval call binding the contract method 0x93a5b1b6.
//
// Solidity: function getTopValidators(uint256 _count) view returns(address[] addresses, uint256[] stakes, string[] dispatcherURLs, string[] blsPublicKeys)
func (_CKPTValStaking *CKPTValStakingCaller) GetTopValidators(opts *bind.CallOpts, _count *big.Int) (struct {
	Addresses      []common.Address
	Stakes         []*big.Int
	DispatcherURLs []string
	BlsPublicKeys  []string
}, error) {
	var out []interface{}
	err := _CKPTValStaking.contract.Call(opts, &out, "getTopValidators", _count)

	outstruct := new(struct {
		Addresses      []common.Address
		Stakes         []*big.Int
		DispatcherURLs []string
		BlsPublicKeys  []string
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Addresses = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.Stakes = *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)
	outstruct.DispatcherURLs = *abi.ConvertType(out[2], new([]string)).(*[]string)
	outstruct.BlsPublicKeys = *abi.ConvertType(out[3], new([]string)).(*[]string)

	return *outstruct, err

}

// GetTopValidators is a free data retrieval call binding the contract method 0x93a5b1b6.
//
// Solidity: function getTopValidators(uint256 _count) view returns(address[] addresses, uint256[] stakes, string[] dispatcherURLs, string[] blsPublicKeys)
func (_CKPTValStaking *CKPTValStakingSession) GetTopValidators(_count *big.Int) (struct {
	Addresses      []common.Address
	Stakes         []*big.Int
	DispatcherURLs []string
	BlsPublicKeys  []string
}, error) {
	return _CKPTValStaking.Contract.GetTopValidators(&_CKPTValStaking.CallOpts, _count)
}

// GetTopValidators is a free data retrieval call binding the contract method 0x93a5b1b6.
//
// Solidity: function getTopValidators(uint256 _count) view returns(address[] addresses, uint256[] stakes, string[] dispatcherURLs, string[] blsPublicKeys)
func (_CKPTValStaking *CKPTValStakingCallerSession) GetTopValidators(_count *big.Int) (struct {
	Addresses      []common.Address
	Stakes         []*big.Int
	DispatcherURLs []string
	BlsPublicKeys  []string
}, error) {
	return _CKPTValStaking.Contract.GetTopValidators(&_CKPTValStaking.CallOpts, _count)
}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _validator) view returns(uint256 stakedAmount, uint256 pendingRewards, uint256 unstakeTime, string dispatcherURL, string blsPublicKey, bool isActive, uint256 index)
func (_CKPTValStaking *CKPTValStakingCaller) GetValidator(opts *bind.CallOpts, _validator common.Address) (struct {
	StakedAmount   *big.Int
	PendingRewards *big.Int
	UnstakeTime    *big.Int
	DispatcherURL  string
	BlsPublicKey   string
	IsActive       bool
	Index          *big.Int
}, error) {
	var out []interface{}
	err := _CKPTValStaking.contract.Call(opts, &out, "getValidator", _validator)

	outstruct := new(struct {
		StakedAmount   *big.Int
		PendingRewards *big.Int
		UnstakeTime    *big.Int
		DispatcherURL  string
		BlsPublicKey   string
		IsActive       bool
		Index          *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StakedAmount = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.PendingRewards = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.UnstakeTime = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.DispatcherURL = *abi.ConvertType(out[3], new(string)).(*string)
	outstruct.BlsPublicKey = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.IsActive = *abi.ConvertType(out[5], new(bool)).(*bool)
	outstruct.Index = *abi.ConvertType(out[6], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _validator) view returns(uint256 stakedAmount, uint256 pendingRewards, uint256 unstakeTime, string dispatcherURL, string blsPublicKey, bool isActive, uint256 index)
func (_CKPTValStaking *CKPTValStakingSession) GetValidator(_validator common.Address) (struct {
	StakedAmount   *big.Int
	PendingRewards *big.Int
	UnstakeTime    *big.Int
	DispatcherURL  string
	BlsPublicKey   string
	IsActive       bool
	Index          *big.Int
}, error) {
	return _CKPTValStaking.Contract.GetValidator(&_CKPTValStaking.CallOpts, _validator)
}

// GetValidator is a free data retrieval call binding the contract method 0x1904bb2e.
//
// Solidity: function getValidator(address _validator) view returns(uint256 stakedAmount, uint256 pendingRewards, uint256 unstakeTime, string dispatcherURL, string blsPublicKey, bool isActive, uint256 index)
func (_CKPTValStaking *CKPTValStakingCallerSession) GetValidator(_validator common.Address) (struct {
	StakedAmount   *big.Int
	PendingRewards *big.Int
	UnstakeTime    *big.Int
	DispatcherURL  string
	BlsPublicKey   string
	IsActive       bool
	Index          *big.Int
}, error) {
	return _CKPTValStaking.Contract.GetValidator(&_CKPTValStaking.CallOpts, _validator)
}

// GetValidatorCount is a free data retrieval call binding the contract method 0x7071688a.
//
// Solidity: function getValidatorCount() view returns(uint256)
func (_CKPTValStaking *CKPTValStakingCaller) GetValidatorCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CKPTValStaking.contract.Call(opts, &out, "getValidatorCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetValidatorCount is a free data retrieval call binding the contract method 0x7071688a.
//
// Solidity: function getValidatorCount() view returns(uint256)
func (_CKPTValStaking *CKPTValStakingSession) GetValidatorCount() (*big.Int, error) {
	return _CKPTValStaking.Contract.GetValidatorCount(&_CKPTValStaking.CallOpts)
}

// GetValidatorCount is a free data retrieval call binding the contract method 0x7071688a.
//
// Solidity: function getValidatorCount() view returns(uint256)
func (_CKPTValStaking *CKPTValStakingCallerSession) GetValidatorCount() (*big.Int, error) {
	return _CKPTValStaking.Contract.GetValidatorCount(&_CKPTValStaking.CallOpts)
}

// LockPeriod is a free data retrieval call binding the contract method 0x3fd8b02f.
//
// Solidity: function lockPeriod() view returns(uint256)
func (_CKPTValStaking *CKPTValStakingCaller) LockPeriod(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CKPTValStaking.contract.Call(opts, &out, "lockPeriod")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LockPeriod is a free data retrieval call binding the contract method 0x3fd8b02f.
//
// Solidity: function lockPeriod() view returns(uint256)
func (_CKPTValStaking *CKPTValStakingSession) LockPeriod() (*big.Int, error) {
	return _CKPTValStaking.Contract.LockPeriod(&_CKPTValStaking.CallOpts)
}

// LockPeriod is a free data retrieval call binding the contract method 0x3fd8b02f.
//
// Solidity: function lockPeriod() view returns(uint256)
func (_CKPTValStaking *CKPTValStakingCallerSession) LockPeriod() (*big.Int, error) {
	return _CKPTValStaking.Contract.LockPeriod(&_CKPTValStaking.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_CKPTValStaking *CKPTValStakingCaller) MinimumStake(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CKPTValStaking.contract.Call(opts, &out, "minimumStake")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_CKPTValStaking *CKPTValStakingSession) MinimumStake() (*big.Int, error) {
	return _CKPTValStaking.Contract.MinimumStake(&_CKPTValStaking.CallOpts)
}

// MinimumStake is a free data retrieval call binding the contract method 0xec5ffac2.
//
// Solidity: function minimumStake() view returns(uint256)
func (_CKPTValStaking *CKPTValStakingCallerSession) MinimumStake() (*big.Int, error) {
	return _CKPTValStaking.Contract.MinimumStake(&_CKPTValStaking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CKPTValStaking *CKPTValStakingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CKPTValStaking.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CKPTValStaking *CKPTValStakingSession) Owner() (common.Address, error) {
	return _CKPTValStaking.Contract.Owner(&_CKPTValStaking.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_CKPTValStaking *CKPTValStakingCallerSession) Owner() (common.Address, error) {
	return _CKPTValStaking.Contract.Owner(&_CKPTValStaking.CallOpts)
}

// RewardRate is a free data retrieval call binding the contract method 0x7b0a47ee.
//
// Solidity: function rewardRate() view returns(uint256)
func (_CKPTValStaking *CKPTValStakingCaller) RewardRate(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _CKPTValStaking.contract.Call(opts, &out, "rewardRate")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RewardRate is a free data retrieval call binding the contract method 0x7b0a47ee.
//
// Solidity: function rewardRate() view returns(uint256)
func (_CKPTValStaking *CKPTValStakingSession) RewardRate() (*big.Int, error) {
	return _CKPTValStaking.Contract.RewardRate(&_CKPTValStaking.CallOpts)
}

// RewardRate is a free data retrieval call binding the contract method 0x7b0a47ee.
//
// Solidity: function rewardRate() view returns(uint256)
func (_CKPTValStaking *CKPTValStakingCallerSession) RewardRate() (*big.Int, error) {
	return _CKPTValStaking.Contract.RewardRate(&_CKPTValStaking.CallOpts)
}

// StakingToken is a free data retrieval call binding the contract method 0x72f702f3.
//
// Solidity: function stakingToken() view returns(address)
func (_CKPTValStaking *CKPTValStakingCaller) StakingToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _CKPTValStaking.contract.Call(opts, &out, "stakingToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakingToken is a free data retrieval call binding the contract method 0x72f702f3.
//
// Solidity: function stakingToken() view returns(address)
func (_CKPTValStaking *CKPTValStakingSession) StakingToken() (common.Address, error) {
	return _CKPTValStaking.Contract.StakingToken(&_CKPTValStaking.CallOpts)
}

// StakingToken is a free data retrieval call binding the contract method 0x72f702f3.
//
// Solidity: function stakingToken() view returns(address)
func (_CKPTValStaking *CKPTValStakingCallerSession) StakingToken() (common.Address, error) {
	return _CKPTValStaking.Contract.StakingToken(&_CKPTValStaking.CallOpts)
}

// ValidatorAddresses is a free data retrieval call binding the contract method 0x99745318.
//
// Solidity: function validatorAddresses(uint256 ) view returns(address)
func (_CKPTValStaking *CKPTValStakingCaller) ValidatorAddresses(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _CKPTValStaking.contract.Call(opts, &out, "validatorAddresses", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ValidatorAddresses is a free data retrieval call binding the contract method 0x99745318.
//
// Solidity: function validatorAddresses(uint256 ) view returns(address)
func (_CKPTValStaking *CKPTValStakingSession) ValidatorAddresses(arg0 *big.Int) (common.Address, error) {
	return _CKPTValStaking.Contract.ValidatorAddresses(&_CKPTValStaking.CallOpts, arg0)
}

// ValidatorAddresses is a free data retrieval call binding the contract method 0x99745318.
//
// Solidity: function validatorAddresses(uint256 ) view returns(address)
func (_CKPTValStaking *CKPTValStakingCallerSession) ValidatorAddresses(arg0 *big.Int) (common.Address, error) {
	return _CKPTValStaking.Contract.ValidatorAddresses(&_CKPTValStaking.CallOpts, arg0)
}

// Validators is a free data retrieval call binding the contract method 0xfa52c7d8.
//
// Solidity: function validators(address ) view returns(uint256 stakedAmount, uint256 lastRewardTime, uint256 pendingRewards, uint256 unstakeTime, string dispatcherURL, string blsPublicKey, bool isActive, uint256 index)
func (_CKPTValStaking *CKPTValStakingCaller) Validators(opts *bind.CallOpts, arg0 common.Address) (struct {
	StakedAmount   *big.Int
	LastRewardTime *big.Int
	PendingRewards *big.Int
	UnstakeTime    *big.Int
	DispatcherURL  string
	BlsPublicKey   string
	IsActive       bool
	Index          *big.Int
}, error) {
	var out []interface{}
	err := _CKPTValStaking.contract.Call(opts, &out, "validators", arg0)

	outstruct := new(struct {
		StakedAmount   *big.Int
		LastRewardTime *big.Int
		PendingRewards *big.Int
		UnstakeTime    *big.Int
		DispatcherURL  string
		BlsPublicKey   string
		IsActive       bool
		Index          *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.StakedAmount = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.LastRewardTime = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.PendingRewards = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)
	outstruct.UnstakeTime = *abi.ConvertType(out[3], new(*big.Int)).(**big.Int)
	outstruct.DispatcherURL = *abi.ConvertType(out[4], new(string)).(*string)
	outstruct.BlsPublicKey = *abi.ConvertType(out[5], new(string)).(*string)
	outstruct.IsActive = *abi.ConvertType(out[6], new(bool)).(*bool)
	outstruct.Index = *abi.ConvertType(out[7], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Validators is a free data retrieval call binding the contract method 0xfa52c7d8.
//
// Solidity: function validators(address ) view returns(uint256 stakedAmount, uint256 lastRewardTime, uint256 pendingRewards, uint256 unstakeTime, string dispatcherURL, string blsPublicKey, bool isActive, uint256 index)
func (_CKPTValStaking *CKPTValStakingSession) Validators(arg0 common.Address) (struct {
	StakedAmount   *big.Int
	LastRewardTime *big.Int
	PendingRewards *big.Int
	UnstakeTime    *big.Int
	DispatcherURL  string
	BlsPublicKey   string
	IsActive       bool
	Index          *big.Int
}, error) {
	return _CKPTValStaking.Contract.Validators(&_CKPTValStaking.CallOpts, arg0)
}

// Validators is a free data retrieval call binding the contract method 0xfa52c7d8.
//
// Solidity: function validators(address ) view returns(uint256 stakedAmount, uint256 lastRewardTime, uint256 pendingRewards, uint256 unstakeTime, string dispatcherURL, string blsPublicKey, bool isActive, uint256 index)
func (_CKPTValStaking *CKPTValStakingCallerSession) Validators(arg0 common.Address) (struct {
	StakedAmount   *big.Int
	LastRewardTime *big.Int
	PendingRewards *big.Int
	UnstakeTime    *big.Int
	DispatcherURL  string
	BlsPublicKey   string
	IsActive       bool
	Index          *big.Int
}, error) {
	return _CKPTValStaking.Contract.Validators(&_CKPTValStaking.CallOpts, arg0)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_CKPTValStaking *CKPTValStakingTransactor) ClaimRewards(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CKPTValStaking.contract.Transact(opts, "claimRewards")
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_CKPTValStaking *CKPTValStakingSession) ClaimRewards() (*types.Transaction, error) {
	return _CKPTValStaking.Contract.ClaimRewards(&_CKPTValStaking.TransactOpts)
}

// ClaimRewards is a paid mutator transaction binding the contract method 0x372500ab.
//
// Solidity: function claimRewards() returns()
func (_CKPTValStaking *CKPTValStakingTransactorSession) ClaimRewards() (*types.Transaction, error) {
	return _CKPTValStaking.Contract.ClaimRewards(&_CKPTValStaking.TransactOpts)
}

// CompleteUnstake is a paid mutator transaction binding the contract method 0x63803b23.
//
// Solidity: function completeUnstake() returns()
func (_CKPTValStaking *CKPTValStakingTransactor) CompleteUnstake(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CKPTValStaking.contract.Transact(opts, "completeUnstake")
}

// CompleteUnstake is a paid mutator transaction binding the contract method 0x63803b23.
//
// Solidity: function completeUnstake() returns()
func (_CKPTValStaking *CKPTValStakingSession) CompleteUnstake() (*types.Transaction, error) {
	return _CKPTValStaking.Contract.CompleteUnstake(&_CKPTValStaking.TransactOpts)
}

// CompleteUnstake is a paid mutator transaction binding the contract method 0x63803b23.
//
// Solidity: function completeUnstake() returns()
func (_CKPTValStaking *CKPTValStakingTransactorSession) CompleteUnstake() (*types.Transaction, error) {
	return _CKPTValStaking.Contract.CompleteUnstake(&_CKPTValStaking.TransactOpts)
}

// InitiateUnstake is a paid mutator transaction binding the contract method 0xae5ac921.
//
// Solidity: function initiateUnstake(uint256 _amount) returns()
func (_CKPTValStaking *CKPTValStakingTransactor) InitiateUnstake(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.contract.Transact(opts, "initiateUnstake", _amount)
}

// InitiateUnstake is a paid mutator transaction binding the contract method 0xae5ac921.
//
// Solidity: function initiateUnstake(uint256 _amount) returns()
func (_CKPTValStaking *CKPTValStakingSession) InitiateUnstake(_amount *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.InitiateUnstake(&_CKPTValStaking.TransactOpts, _amount)
}

// InitiateUnstake is a paid mutator transaction binding the contract method 0xae5ac921.
//
// Solidity: function initiateUnstake(uint256 _amount) returns()
func (_CKPTValStaking *CKPTValStakingTransactorSession) InitiateUnstake(_amount *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.InitiateUnstake(&_CKPTValStaking.TransactOpts, _amount)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x3d81380d.
//
// Solidity: function registerValidator(string _dispatcherURL, string _blsPublicKey) returns()
func (_CKPTValStaking *CKPTValStakingTransactor) RegisterValidator(opts *bind.TransactOpts, _dispatcherURL string, _blsPublicKey string) (*types.Transaction, error) {
	return _CKPTValStaking.contract.Transact(opts, "registerValidator", _dispatcherURL, _blsPublicKey)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x3d81380d.
//
// Solidity: function registerValidator(string _dispatcherURL, string _blsPublicKey) returns()
func (_CKPTValStaking *CKPTValStakingSession) RegisterValidator(_dispatcherURL string, _blsPublicKey string) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.RegisterValidator(&_CKPTValStaking.TransactOpts, _dispatcherURL, _blsPublicKey)
}

// RegisterValidator is a paid mutator transaction binding the contract method 0x3d81380d.
//
// Solidity: function registerValidator(string _dispatcherURL, string _blsPublicKey) returns()
func (_CKPTValStaking *CKPTValStakingTransactorSession) RegisterValidator(_dispatcherURL string, _blsPublicKey string) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.RegisterValidator(&_CKPTValStaking.TransactOpts, _dispatcherURL, _blsPublicKey)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CKPTValStaking *CKPTValStakingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _CKPTValStaking.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CKPTValStaking *CKPTValStakingSession) RenounceOwnership() (*types.Transaction, error) {
	return _CKPTValStaking.Contract.RenounceOwnership(&_CKPTValStaking.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_CKPTValStaking *CKPTValStakingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _CKPTValStaking.Contract.RenounceOwnership(&_CKPTValStaking.TransactOpts)
}

// SetLockPeriod is a paid mutator transaction binding the contract method 0x779972da.
//
// Solidity: function setLockPeriod(uint256 _lockPeriod) returns()
func (_CKPTValStaking *CKPTValStakingTransactor) SetLockPeriod(opts *bind.TransactOpts, _lockPeriod *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.contract.Transact(opts, "setLockPeriod", _lockPeriod)
}

// SetLockPeriod is a paid mutator transaction binding the contract method 0x779972da.
//
// Solidity: function setLockPeriod(uint256 _lockPeriod) returns()
func (_CKPTValStaking *CKPTValStakingSession) SetLockPeriod(_lockPeriod *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.SetLockPeriod(&_CKPTValStaking.TransactOpts, _lockPeriod)
}

// SetLockPeriod is a paid mutator transaction binding the contract method 0x779972da.
//
// Solidity: function setLockPeriod(uint256 _lockPeriod) returns()
func (_CKPTValStaking *CKPTValStakingTransactorSession) SetLockPeriod(_lockPeriod *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.SetLockPeriod(&_CKPTValStaking.TransactOpts, _lockPeriod)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_CKPTValStaking *CKPTValStakingTransactor) SetMinimumStake(opts *bind.TransactOpts, _minimumStake *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.contract.Transact(opts, "setMinimumStake", _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_CKPTValStaking *CKPTValStakingSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.SetMinimumStake(&_CKPTValStaking.TransactOpts, _minimumStake)
}

// SetMinimumStake is a paid mutator transaction binding the contract method 0x233e9903.
//
// Solidity: function setMinimumStake(uint256 _minimumStake) returns()
func (_CKPTValStaking *CKPTValStakingTransactorSession) SetMinimumStake(_minimumStake *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.SetMinimumStake(&_CKPTValStaking.TransactOpts, _minimumStake)
}

// SetRewardRate is a paid mutator transaction binding the contract method 0x9e447fc6.
//
// Solidity: function setRewardRate(uint256 _rewardRate) returns()
func (_CKPTValStaking *CKPTValStakingTransactor) SetRewardRate(opts *bind.TransactOpts, _rewardRate *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.contract.Transact(opts, "setRewardRate", _rewardRate)
}

// SetRewardRate is a paid mutator transaction binding the contract method 0x9e447fc6.
//
// Solidity: function setRewardRate(uint256 _rewardRate) returns()
func (_CKPTValStaking *CKPTValStakingSession) SetRewardRate(_rewardRate *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.SetRewardRate(&_CKPTValStaking.TransactOpts, _rewardRate)
}

// SetRewardRate is a paid mutator transaction binding the contract method 0x9e447fc6.
//
// Solidity: function setRewardRate(uint256 _rewardRate) returns()
func (_CKPTValStaking *CKPTValStakingTransactorSession) SetRewardRate(_rewardRate *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.SetRewardRate(&_CKPTValStaking.TransactOpts, _rewardRate)
}

// Stake is a paid mutator transaction binding the contract method 0xa694fc3a.
//
// Solidity: function stake(uint256 _amount) returns()
func (_CKPTValStaking *CKPTValStakingTransactor) Stake(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.contract.Transact(opts, "stake", _amount)
}

// Stake is a paid mutator transaction binding the contract method 0xa694fc3a.
//
// Solidity: function stake(uint256 _amount) returns()
func (_CKPTValStaking *CKPTValStakingSession) Stake(_amount *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.Stake(&_CKPTValStaking.TransactOpts, _amount)
}

// Stake is a paid mutator transaction binding the contract method 0xa694fc3a.
//
// Solidity: function stake(uint256 _amount) returns()
func (_CKPTValStaking *CKPTValStakingTransactorSession) Stake(_amount *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.Stake(&_CKPTValStaking.TransactOpts, _amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CKPTValStaking *CKPTValStakingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _CKPTValStaking.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CKPTValStaking *CKPTValStakingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.TransferOwnership(&_CKPTValStaking.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_CKPTValStaking *CKPTValStakingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.TransferOwnership(&_CKPTValStaking.TransactOpts, newOwner)
}

// UpdateValidatorCursor is a paid mutator transaction binding the contract method 0x51057fad.
//
// Solidity: function updateValidatorCursor(uint256 _count) returns()
func (_CKPTValStaking *CKPTValStakingTransactor) UpdateValidatorCursor(opts *bind.TransactOpts, _count *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.contract.Transact(opts, "updateValidatorCursor", _count)
}

// UpdateValidatorCursor is a paid mutator transaction binding the contract method 0x51057fad.
//
// Solidity: function updateValidatorCursor(uint256 _count) returns()
func (_CKPTValStaking *CKPTValStakingSession) UpdateValidatorCursor(_count *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.UpdateValidatorCursor(&_CKPTValStaking.TransactOpts, _count)
}

// UpdateValidatorCursor is a paid mutator transaction binding the contract method 0x51057fad.
//
// Solidity: function updateValidatorCursor(uint256 _count) returns()
func (_CKPTValStaking *CKPTValStakingTransactorSession) UpdateValidatorCursor(_count *big.Int) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.UpdateValidatorCursor(&_CKPTValStaking.TransactOpts, _count)
}

// UpdateValidatorInfo is a paid mutator transaction binding the contract method 0x9dc820a5.
//
// Solidity: function updateValidatorInfo(string _dispatcherURL, string _blsPublicKey) returns()
func (_CKPTValStaking *CKPTValStakingTransactor) UpdateValidatorInfo(opts *bind.TransactOpts, _dispatcherURL string, _blsPublicKey string) (*types.Transaction, error) {
	return _CKPTValStaking.contract.Transact(opts, "updateValidatorInfo", _dispatcherURL, _blsPublicKey)
}

// UpdateValidatorInfo is a paid mutator transaction binding the contract method 0x9dc820a5.
//
// Solidity: function updateValidatorInfo(string _dispatcherURL, string _blsPublicKey) returns()
func (_CKPTValStaking *CKPTValStakingSession) UpdateValidatorInfo(_dispatcherURL string, _blsPublicKey string) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.UpdateValidatorInfo(&_CKPTValStaking.TransactOpts, _dispatcherURL, _blsPublicKey)
}

// UpdateValidatorInfo is a paid mutator transaction binding the contract method 0x9dc820a5.
//
// Solidity: function updateValidatorInfo(string _dispatcherURL, string _blsPublicKey) returns()
func (_CKPTValStaking *CKPTValStakingTransactorSession) UpdateValidatorInfo(_dispatcherURL string, _blsPublicKey string) (*types.Transaction, error) {
	return _CKPTValStaking.Contract.UpdateValidatorInfo(&_CKPTValStaking.TransactOpts, _dispatcherURL, _blsPublicKey)
}

// CKPTValStakingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the CKPTValStaking contract.
type CKPTValStakingOwnershipTransferredIterator struct {
	Event *CKPTValStakingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CKPTValStakingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CKPTValStakingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CKPTValStakingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CKPTValStakingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CKPTValStakingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CKPTValStakingOwnershipTransferred represents a OwnershipTransferred event raised by the CKPTValStaking contract.
type CKPTValStakingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CKPTValStaking *CKPTValStakingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*CKPTValStakingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CKPTValStaking.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &CKPTValStakingOwnershipTransferredIterator{contract: _CKPTValStaking.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CKPTValStaking *CKPTValStakingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *CKPTValStakingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _CKPTValStaking.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CKPTValStakingOwnershipTransferred)
				if err := _CKPTValStaking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_CKPTValStaking *CKPTValStakingFilterer) ParseOwnershipTransferred(log types.Log) (*CKPTValStakingOwnershipTransferred, error) {
	event := new(CKPTValStakingOwnershipTransferred)
	if err := _CKPTValStaking.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CKPTValStakingRewardsClaimedIterator is returned from FilterRewardsClaimed and is used to iterate over the raw logs and unpacked data for RewardsClaimed events raised by the CKPTValStaking contract.
type CKPTValStakingRewardsClaimedIterator struct {
	Event *CKPTValStakingRewardsClaimed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CKPTValStakingRewardsClaimedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CKPTValStakingRewardsClaimed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CKPTValStakingRewardsClaimed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CKPTValStakingRewardsClaimedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CKPTValStakingRewardsClaimedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CKPTValStakingRewardsClaimed represents a RewardsClaimed event raised by the CKPTValStaking contract.
type CKPTValStakingRewardsClaimed struct {
	Validator common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRewardsClaimed is a free log retrieval operation binding the contract event 0xfc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe.
//
// Solidity: event RewardsClaimed(address indexed validator, uint256 amount)
func (_CKPTValStaking *CKPTValStakingFilterer) FilterRewardsClaimed(opts *bind.FilterOpts, validator []common.Address) (*CKPTValStakingRewardsClaimedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CKPTValStaking.contract.FilterLogs(opts, "RewardsClaimed", validatorRule)
	if err != nil {
		return nil, err
	}
	return &CKPTValStakingRewardsClaimedIterator{contract: _CKPTValStaking.contract, event: "RewardsClaimed", logs: logs, sub: sub}, nil
}

// WatchRewardsClaimed is a free log subscription operation binding the contract event 0xfc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe.
//
// Solidity: event RewardsClaimed(address indexed validator, uint256 amount)
func (_CKPTValStaking *CKPTValStakingFilterer) WatchRewardsClaimed(opts *bind.WatchOpts, sink chan<- *CKPTValStakingRewardsClaimed, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CKPTValStaking.contract.WatchLogs(opts, "RewardsClaimed", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CKPTValStakingRewardsClaimed)
				if err := _CKPTValStaking.contract.UnpackLog(event, "RewardsClaimed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRewardsClaimed is a log parse operation binding the contract event 0xfc30cddea38e2bf4d6ea7d3f9ed3b6ad7f176419f4963bd81318067a4aee73fe.
//
// Solidity: event RewardsClaimed(address indexed validator, uint256 amount)
func (_CKPTValStaking *CKPTValStakingFilterer) ParseRewardsClaimed(log types.Log) (*CKPTValStakingRewardsClaimed, error) {
	event := new(CKPTValStakingRewardsClaimed)
	if err := _CKPTValStaking.contract.UnpackLog(event, "RewardsClaimed", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CKPTValStakingStakedIterator is returned from FilterStaked and is used to iterate over the raw logs and unpacked data for Staked events raised by the CKPTValStaking contract.
type CKPTValStakingStakedIterator struct {
	Event *CKPTValStakingStaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CKPTValStakingStakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CKPTValStakingStaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CKPTValStakingStaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CKPTValStakingStakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CKPTValStakingStakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CKPTValStakingStaked represents a Staked event raised by the CKPTValStaking contract.
type CKPTValStakingStaked struct {
	Validator common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterStaked is a free log retrieval operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address indexed validator, uint256 amount)
func (_CKPTValStaking *CKPTValStakingFilterer) FilterStaked(opts *bind.FilterOpts, validator []common.Address) (*CKPTValStakingStakedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CKPTValStaking.contract.FilterLogs(opts, "Staked", validatorRule)
	if err != nil {
		return nil, err
	}
	return &CKPTValStakingStakedIterator{contract: _CKPTValStaking.contract, event: "Staked", logs: logs, sub: sub}, nil
}

// WatchStaked is a free log subscription operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address indexed validator, uint256 amount)
func (_CKPTValStaking *CKPTValStakingFilterer) WatchStaked(opts *bind.WatchOpts, sink chan<- *CKPTValStakingStaked, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CKPTValStaking.contract.WatchLogs(opts, "Staked", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CKPTValStakingStaked)
				if err := _CKPTValStaking.contract.UnpackLog(event, "Staked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStaked is a log parse operation binding the contract event 0x9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d.
//
// Solidity: event Staked(address indexed validator, uint256 amount)
func (_CKPTValStaking *CKPTValStakingFilterer) ParseStaked(log types.Log) (*CKPTValStakingStaked, error) {
	event := new(CKPTValStakingStaked)
	if err := _CKPTValStaking.contract.UnpackLog(event, "Staked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CKPTValStakingUnstakeInitiatedIterator is returned from FilterUnstakeInitiated and is used to iterate over the raw logs and unpacked data for UnstakeInitiated events raised by the CKPTValStaking contract.
type CKPTValStakingUnstakeInitiatedIterator struct {
	Event *CKPTValStakingUnstakeInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CKPTValStakingUnstakeInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CKPTValStakingUnstakeInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CKPTValStakingUnstakeInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CKPTValStakingUnstakeInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CKPTValStakingUnstakeInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CKPTValStakingUnstakeInitiated represents a UnstakeInitiated event raised by the CKPTValStaking contract.
type CKPTValStakingUnstakeInitiated struct {
	Validator  common.Address
	Amount     *big.Int
	UnlockTime *big.Int
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterUnstakeInitiated is a free log retrieval operation binding the contract event 0x9cee5eacd317086e5050733a5dad16ef5aaec185de792371a9625bfee2a3213b.
//
// Solidity: event UnstakeInitiated(address indexed validator, uint256 amount, uint256 unlockTime)
func (_CKPTValStaking *CKPTValStakingFilterer) FilterUnstakeInitiated(opts *bind.FilterOpts, validator []common.Address) (*CKPTValStakingUnstakeInitiatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CKPTValStaking.contract.FilterLogs(opts, "UnstakeInitiated", validatorRule)
	if err != nil {
		return nil, err
	}
	return &CKPTValStakingUnstakeInitiatedIterator{contract: _CKPTValStaking.contract, event: "UnstakeInitiated", logs: logs, sub: sub}, nil
}

// WatchUnstakeInitiated is a free log subscription operation binding the contract event 0x9cee5eacd317086e5050733a5dad16ef5aaec185de792371a9625bfee2a3213b.
//
// Solidity: event UnstakeInitiated(address indexed validator, uint256 amount, uint256 unlockTime)
func (_CKPTValStaking *CKPTValStakingFilterer) WatchUnstakeInitiated(opts *bind.WatchOpts, sink chan<- *CKPTValStakingUnstakeInitiated, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CKPTValStaking.contract.WatchLogs(opts, "UnstakeInitiated", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CKPTValStakingUnstakeInitiated)
				if err := _CKPTValStaking.contract.UnpackLog(event, "UnstakeInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnstakeInitiated is a log parse operation binding the contract event 0x9cee5eacd317086e5050733a5dad16ef5aaec185de792371a9625bfee2a3213b.
//
// Solidity: event UnstakeInitiated(address indexed validator, uint256 amount, uint256 unlockTime)
func (_CKPTValStaking *CKPTValStakingFilterer) ParseUnstakeInitiated(log types.Log) (*CKPTValStakingUnstakeInitiated, error) {
	event := new(CKPTValStakingUnstakeInitiated)
	if err := _CKPTValStaking.contract.UnpackLog(event, "UnstakeInitiated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CKPTValStakingUnstakedIterator is returned from FilterUnstaked and is used to iterate over the raw logs and unpacked data for Unstaked events raised by the CKPTValStaking contract.
type CKPTValStakingUnstakedIterator struct {
	Event *CKPTValStakingUnstaked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CKPTValStakingUnstakedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CKPTValStakingUnstaked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CKPTValStakingUnstaked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CKPTValStakingUnstakedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CKPTValStakingUnstakedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CKPTValStakingUnstaked represents a Unstaked event raised by the CKPTValStaking contract.
type CKPTValStakingUnstaked struct {
	Validator common.Address
	Amount    *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterUnstaked is a free log retrieval operation binding the contract event 0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75.
//
// Solidity: event Unstaked(address indexed validator, uint256 amount)
func (_CKPTValStaking *CKPTValStakingFilterer) FilterUnstaked(opts *bind.FilterOpts, validator []common.Address) (*CKPTValStakingUnstakedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CKPTValStaking.contract.FilterLogs(opts, "Unstaked", validatorRule)
	if err != nil {
		return nil, err
	}
	return &CKPTValStakingUnstakedIterator{contract: _CKPTValStaking.contract, event: "Unstaked", logs: logs, sub: sub}, nil
}

// WatchUnstaked is a free log subscription operation binding the contract event 0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75.
//
// Solidity: event Unstaked(address indexed validator, uint256 amount)
func (_CKPTValStaking *CKPTValStakingFilterer) WatchUnstaked(opts *bind.WatchOpts, sink chan<- *CKPTValStakingUnstaked, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CKPTValStaking.contract.WatchLogs(opts, "Unstaked", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CKPTValStakingUnstaked)
				if err := _CKPTValStaking.contract.UnpackLog(event, "Unstaked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnstaked is a log parse operation binding the contract event 0x0f5bb82176feb1b5e747e28471aa92156a04d9f3ab9f45f28e2d704232b93f75.
//
// Solidity: event Unstaked(address indexed validator, uint256 amount)
func (_CKPTValStaking *CKPTValStakingFilterer) ParseUnstaked(log types.Log) (*CKPTValStakingUnstaked, error) {
	event := new(CKPTValStakingUnstaked)
	if err := _CKPTValStaking.contract.UnpackLog(event, "Unstaked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CKPTValStakingValidatorRegisteredIterator is returned from FilterValidatorRegistered and is used to iterate over the raw logs and unpacked data for ValidatorRegistered events raised by the CKPTValStaking contract.
type CKPTValStakingValidatorRegisteredIterator struct {
	Event *CKPTValStakingValidatorRegistered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CKPTValStakingValidatorRegisteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CKPTValStakingValidatorRegistered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CKPTValStakingValidatorRegistered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CKPTValStakingValidatorRegisteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CKPTValStakingValidatorRegisteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CKPTValStakingValidatorRegistered represents a ValidatorRegistered event raised by the CKPTValStaking contract.
type CKPTValStakingValidatorRegistered struct {
	Validator     common.Address
	DispatcherURL string
	BlsPublicKey  string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterValidatorRegistered is a free log retrieval operation binding the contract event 0x5196ca52b5246aa712ef709c67d65576c4f5ca8aba7d2df5d782cca62cae21d5.
//
// Solidity: event ValidatorRegistered(address indexed validator, string dispatcherURL, string blsPublicKey)
func (_CKPTValStaking *CKPTValStakingFilterer) FilterValidatorRegistered(opts *bind.FilterOpts, validator []common.Address) (*CKPTValStakingValidatorRegisteredIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CKPTValStaking.contract.FilterLogs(opts, "ValidatorRegistered", validatorRule)
	if err != nil {
		return nil, err
	}
	return &CKPTValStakingValidatorRegisteredIterator{contract: _CKPTValStaking.contract, event: "ValidatorRegistered", logs: logs, sub: sub}, nil
}

// WatchValidatorRegistered is a free log subscription operation binding the contract event 0x5196ca52b5246aa712ef709c67d65576c4f5ca8aba7d2df5d782cca62cae21d5.
//
// Solidity: event ValidatorRegistered(address indexed validator, string dispatcherURL, string blsPublicKey)
func (_CKPTValStaking *CKPTValStakingFilterer) WatchValidatorRegistered(opts *bind.WatchOpts, sink chan<- *CKPTValStakingValidatorRegistered, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CKPTValStaking.contract.WatchLogs(opts, "ValidatorRegistered", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CKPTValStakingValidatorRegistered)
				if err := _CKPTValStaking.contract.UnpackLog(event, "ValidatorRegistered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorRegistered is a log parse operation binding the contract event 0x5196ca52b5246aa712ef709c67d65576c4f5ca8aba7d2df5d782cca62cae21d5.
//
// Solidity: event ValidatorRegistered(address indexed validator, string dispatcherURL, string blsPublicKey)
func (_CKPTValStaking *CKPTValStakingFilterer) ParseValidatorRegistered(log types.Log) (*CKPTValStakingValidatorRegistered, error) {
	event := new(CKPTValStakingValidatorRegistered)
	if err := _CKPTValStaking.contract.UnpackLog(event, "ValidatorRegistered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// CKPTValStakingValidatorUpdatedIterator is returned from FilterValidatorUpdated and is used to iterate over the raw logs and unpacked data for ValidatorUpdated events raised by the CKPTValStaking contract.
type CKPTValStakingValidatorUpdatedIterator struct {
	Event *CKPTValStakingValidatorUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *CKPTValStakingValidatorUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(CKPTValStakingValidatorUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(CKPTValStakingValidatorUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *CKPTValStakingValidatorUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *CKPTValStakingValidatorUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// CKPTValStakingValidatorUpdated represents a ValidatorUpdated event raised by the CKPTValStaking contract.
type CKPTValStakingValidatorUpdated struct {
	Validator     common.Address
	DispatcherURL string
	BlsPublicKey  string
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterValidatorUpdated is a free log retrieval operation binding the contract event 0x7f35b3dd337a65b9cbaf229ba2c1c6e4aa76460db271df1248aa1a605d44ddf2.
//
// Solidity: event ValidatorUpdated(address indexed validator, string dispatcherURL, string blsPublicKey)
func (_CKPTValStaking *CKPTValStakingFilterer) FilterValidatorUpdated(opts *bind.FilterOpts, validator []common.Address) (*CKPTValStakingValidatorUpdatedIterator, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CKPTValStaking.contract.FilterLogs(opts, "ValidatorUpdated", validatorRule)
	if err != nil {
		return nil, err
	}
	return &CKPTValStakingValidatorUpdatedIterator{contract: _CKPTValStaking.contract, event: "ValidatorUpdated", logs: logs, sub: sub}, nil
}

// WatchValidatorUpdated is a free log subscription operation binding the contract event 0x7f35b3dd337a65b9cbaf229ba2c1c6e4aa76460db271df1248aa1a605d44ddf2.
//
// Solidity: event ValidatorUpdated(address indexed validator, string dispatcherURL, string blsPublicKey)
func (_CKPTValStaking *CKPTValStakingFilterer) WatchValidatorUpdated(opts *bind.WatchOpts, sink chan<- *CKPTValStakingValidatorUpdated, validator []common.Address) (event.Subscription, error) {

	var validatorRule []interface{}
	for _, validatorItem := range validator {
		validatorRule = append(validatorRule, validatorItem)
	}

	logs, sub, err := _CKPTValStaking.contract.WatchLogs(opts, "ValidatorUpdated", validatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(CKPTValStakingValidatorUpdated)
				if err := _CKPTValStaking.contract.UnpackLog(event, "ValidatorUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseValidatorUpdated is a log parse operation binding the contract event 0x7f35b3dd337a65b9cbaf229ba2c1c6e4aa76460db271df1248aa1a605d44ddf2.
//
// Solidity: event ValidatorUpdated(address indexed validator, string dispatcherURL, string blsPublicKey)
func (_CKPTValStaking *CKPTValStakingFilterer) ParseValidatorUpdated(log types.Log) (*CKPTValStakingValidatorUpdated, error) {
	event := new(CKPTValStakingValidatorUpdated)
	if err := _CKPTValStaking.contract.UnpackLog(event, "ValidatorUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
